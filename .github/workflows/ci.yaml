name: CI

on: push

jobs:
  build:
    name: ${{ matrix.preset }}-${{ matrix.config }}-${{ matrix.sanitize }}
    strategy:
      fail-fast: false
      matrix:
        preset: [linux-clang, linux-gcc, macos, windows]
        config: [Debug, Release]
        sanitize: [address, thread, undefined, leak, memory]
        exclude:
          - { preset: linux-gcc, sanitize: memory }
          - { preset: macos, sanitize: leak }
          - { preset: macos, sanitize: memory }
          - { preset: windows, sanitize: thread }
          - { preset: windows, sanitize: undefined }
          - { preset: windows, sanitize: leak }
          - { preset: windows, sanitize: memory }
        include:
          - { preset: linux-clang, os: ubuntu-latest }
          - { preset: linux-gcc, os: ubuntu-latest }
          - { preset: macos, os: macos-latest }
          - { preset: windows, os: windows-latest }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtest-dev libgmock-dev
      - name: Install dependencies on macOS
        if: runner.os == 'macOS'
        run: |
          brew install googletest

      - name: Configure
        run: >
          cmake --preset ${{ matrix.preset }}
          -DCARES_BUILD_TESTS=ON
          -DCARES_SANITIZE=${{ matrix.sanitize }}

      - name: Build
        run: cmake --build --preset ${{ matrix.preset }} --config ${{ matrix.config }}

      - name: Test
        run: ctest --preset ${{ matrix.preset }} -C ${{ matrix.config }}

  build-mobile:
    name: ${{ matrix.preset }}-${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        preset: [android, ios]
        config: [Debug, Release]
        include:
          - { preset: android, os: ubuntu-latest }
          - { preset: ios, os: macos-latest }
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build

      - name: Configure
        run: cmake --preset ${{ matrix.preset }}

      - name: Build
        run: cmake --build --preset ${{ matrix.preset }} --config ${{ matrix.config }}

  build-bsd:
    name: ${{ matrix.preset }}-${{ matrix.arch }}-${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        preset: [freebsd, netbsd, openbsd]
        arch: [arm64, x86_64]
        config: [Debug, Release]
        include:
          - preset: freebsd
            version: "14.0"
            install: sudo pkg install -y cmake ninja
          - preset: netbsd
            version: "10.0"
            install: sudo pkgin -y install cmake ninja-build gcc13
          - preset: openbsd
            version: "7.5"
            install: sudo pkg_add cmake ninja
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: cross-platform-actions/action@master
        with:
          operating_system: ${{ matrix.preset }}
          architecture: ${{ matrix.arch }}
          version: ${{ matrix.version }}
          run: |
            ${{ matrix.install }}
            cmake -B build -G Ninja                   \
              -DCARES_BUILD_TESTS=ON                  \
              -DCMAKE_BUILD_TYPE=${{ matrix.config }}
            cmake --build build
            cd build
            ctest -V -C ${{ matrix.config }}

  build-msys2:
    name: msys2-${{ matrix.preset }}-${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        preset: [UCRT64, CLANG64, CLANG32, MINGW64, MINGW32]
        config: [Debug, Release]
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - uses: actions/checkout@v4
      - uses: msys2/setup-msys2@v2
        with:
          msystem: ${{ matrix.preset }}
          update: true
          pacboy: >-
            cmake:p
            gcc:p
            gtest:p
            ninja:p

      - name: Configure
        run: >
          cmake -B build -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.config }}
          -DCARES_BUILD_TESTS=ON

      - name: Build
        run: cmake --build build

      - name: Test
        working-directory: build
        run: ctest -V -C ${{ matrix.config }}

  build-cygwin:
    name: cygwin-${{ matrix.config }}
    strategy:
      fail-fast: false
      matrix:
        config: [Debug, Release]
    runs-on: windows-latest
    defaults:
      run:
        shell: C:\cygwin\bin\bash.exe --noprofile --norc -o igncr -eo pipefail '{0}'
    steps:
      - uses: actions/checkout@v4
      - uses: cygwin/cygwin-install-action@v4
        with:
          packages: cmake gcc-g++ ninja

      - name: Configure
        run: >
          cmake -B build -G Ninja
          -DCMAKE_BUILD_TYPE=${{ matrix.config }}

      - name: Build
        run: cmake --build build
